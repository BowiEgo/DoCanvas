{"version":3,"file":"x-canvas.js","sources":["../../src/css/property-descriptors/background-color.ts","../../src/css/property-descriptors/border-color.ts","../../src/css/syntax/parser.ts","../../src/css/property-descriptors/border-width.ts","../../src/css/property-descriptors/color.ts","../../src/css/property-descriptors/display.ts","../../src/css/property-descriptors/font-size.ts","../../src/css/property-descriptors/font-weight.ts","../../src/css/property-descriptors/line-height.ts","../../src/css/property-descriptors/margin.ts","../../src/css/property-descriptors/opacity.ts","../../src/css/property-descriptors/padding.ts","../../src/css/property-descriptors/text-align.ts","../../src/css/property-descriptors/transform.ts","../../src/css/property-descriptors/visibility.ts","../../src/css/property-descriptors/z-index.ts","../../src/css/index.ts","../../src/tree-node/index.ts","../../src/render/renderObject.ts","../../src/render/index.ts","../../src/utils/general.ts","../../src/element/index.ts","../../src/utils/patchFlags.ts","../../src/index.ts","../../src/engine.ts"],"sourcesContent":["import {\n  IPropertyTypeValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nexport const backgroundColor: IPropertyTypeValueDescriptor = {\n  name: `background-color`,\n  initialValue: 'transparent',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TYPE_VALUE,\n  format: 'color'\n}\n","import {\n  IPropertyTypeValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nconst borderColorForSide = (side: string): IPropertyTypeValueDescriptor => ({\n  name: `border-${side}-color`,\n  initialValue: 'transparent',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TYPE_VALUE,\n  format: 'color'\n})\n\nexport const borderTopColor: IPropertyTypeValueDescriptor =\n  borderColorForSide('top')\nexport const borderRightColor: IPropertyTypeValueDescriptor =\n  borderColorForSide('right')\nexport const borderBottomColor: IPropertyTypeValueDescriptor =\n  borderColorForSide('bottom')\nexport const borderLeftColor: IPropertyTypeValueDescriptor =\n  borderColorForSide('left')\n","import {\n  CSSToken,\n  DimensionToken,\n  NumberValueToken,\n  StringValueToken,\n  TokenType\n} from './tokenizer'\n\nexport type CSSBlockType =\n  | TokenType.LEFT_PARENTHESIS_TOKEN\n  | TokenType.LEFT_SQUARE_BRACKET_TOKEN\n  | TokenType.LEFT_CURLY_BRACKET_TOKEN\n\nexport interface CSSBlock {\n  type: CSSBlockType\n  values: CSSValue[]\n}\n\nexport interface CSSFunction {\n  type: TokenType.FUNCTION\n  name: string\n  values: CSSValue[]\n}\n\nexport type CSSValue = CSSFunction | CSSToken | CSSBlock\n\n// export class Parser {\n//   private _tokens: CSSToken[]\n\n//   constructor(tokens: CSSToken[]) {\n//     this._tokens = tokens\n//   }\n\n//   static create(value: string): Parser {\n//     const tokenizer = new Tokenizer()\n//     tokenizer.write(value)\n//     return new Parser(tokenizer.read())\n//   }\n\n//   static parseValue(value: string): CSSValue {\n//     return Parser.create(value).parseComponentValue()\n//   }\n\n//   static parseValues(value: string): CSSValue[] {\n//     return Parser.create(value).parseComponentValues()\n//   }\n\n//   parseComponentValue(): CSSValue {\n//     let token = this.consumeToken()\n//     while (token.type === TokenType.WHITESPACE_TOKEN) {\n//       token = this.consumeToken()\n//     }\n\n//     if (token.type === TokenType.EOF_TOKEN) {\n//       throw new SyntaxError(`Error parsing CSS component value, unexpected EOF`)\n//     }\n\n//     this.reconsumeToken(token)\n//     const value = this.consumeComponentValue()\n\n//     do {\n//       token = this.consumeToken()\n//     } while (token.type === TokenType.WHITESPACE_TOKEN)\n\n//     if (token.type === TokenType.EOF_TOKEN) {\n//       return value\n//     }\n\n//     throw new SyntaxError(\n//       `Error parsing CSS component value, multiple values found when expecting only one`\n//     )\n//   }\n\n//   parseComponentValues(): CSSValue[] {\n//     const values = []\n//     while (true) {\n//       const value = this.consumeComponentValue()\n//       if (value.type === TokenType.EOF_TOKEN) {\n//         return values\n//       }\n//       values.push(value)\n//       values.push()\n//     }\n//   }\n\n//   private consumeComponentValue(): CSSValue {\n//     const token = this.consumeToken()\n\n//     switch (token.type) {\n//       case TokenType.LEFT_CURLY_BRACKET_TOKEN:\n//       case TokenType.LEFT_SQUARE_BRACKET_TOKEN:\n//       case TokenType.LEFT_PARENTHESIS_TOKEN:\n//         return this.consumeSimpleBlock(token.type)\n//       case TokenType.FUNCTION_TOKEN:\n//         return this.consumeFunction(token)\n//     }\n\n//     return token\n//   }\n\n//   private consumeSimpleBlock(type: CSSBlockType): CSSBlock {\n//     const block: CSSBlock = { type, values: [] }\n\n//     let token = this.consumeToken()\n//     while (true) {\n//       if (token.type === TokenType.EOF_TOKEN || isEndingTokenFor(token, type)) {\n//         return block\n//       }\n\n//       this.reconsumeToken(token)\n//       block.values.push(this.consumeComponentValue())\n//       token = this.consumeToken()\n//     }\n//   }\n\n//   private consumeFunction(functionToken: StringValueToken): CSSFunction {\n//     const cssFunction: CSSFunction = {\n//       name: functionToken.value,\n//       values: [],\n//       type: TokenType.FUNCTION\n//     }\n\n//     while (true) {\n//       const token = this.consumeToken()\n//       if (\n//         token.type === TokenType.EOF_TOKEN ||\n//         token.type === TokenType.RIGHT_PARENTHESIS_TOKEN\n//       ) {\n//         return cssFunction\n//       }\n\n//       this.reconsumeToken(token)\n//       cssFunction.values.push(this.consumeComponentValue())\n//     }\n//   }\n\n//   private consumeToken(): CSSToken {\n//     const token = this._tokens.shift()\n//     return typeof token === 'undefined' ? EOF_TOKEN : token\n//   }\n\n//   private reconsumeToken(token: CSSToken): void {\n//     this._tokens.unshift(token)\n//   }\n// }\n\nexport const isDimensionToken = (token: CSSValue): token is DimensionToken =>\n  token.type === TokenType.DIMENSION_TOKEN\nexport const isNumberToken = (token: CSSValue): token is NumberValueToken =>\n  token.type === TokenType.NUMBER_TOKEN\nexport const isIdentToken = (token: CSSValue): token is StringValueToken =>\n  token.type === TokenType.IDENT_TOKEN\nexport const isStringToken = (token: CSSValue): token is StringValueToken =>\n  token.type === TokenType.STRING_TOKEN\nexport const isIdentWithValue = (token: CSSValue, value: string): boolean =>\n  isIdentToken(token) && token.value === value\n\nexport const nonWhiteSpace = (token: CSSValue): boolean =>\n  token.type !== TokenType.WHITESPACE_TOKEN\nexport const nonFunctionArgSeparator = (token: CSSValue): boolean =>\n  token.type !== TokenType.WHITESPACE_TOKEN &&\n  token.type !== TokenType.COMMA_TOKEN\n\nexport const parseFunctionArgs = (tokens: CSSValue[]): CSSValue[][] => {\n  const args: CSSValue[][] = []\n  let arg: CSSValue[] = []\n  tokens.forEach((token) => {\n    if (token.type === TokenType.COMMA_TOKEN) {\n      if (arg.length === 0) {\n        throw new Error(`Error parsing function args, zero tokens for arg`)\n      }\n      args.push(arg)\n      arg = []\n      return\n    }\n\n    if (token.type !== TokenType.WHITESPACE_TOKEN) {\n      arg.push(token)\n    }\n  })\n  if (arg.length) {\n    args.push(arg)\n  }\n\n  return args\n}\n\nconst isEndingTokenFor = (token: CSSToken, type: CSSBlockType): boolean => {\n  if (\n    type === TokenType.LEFT_CURLY_BRACKET_TOKEN &&\n    token.type === TokenType.RIGHT_CURLY_BRACKET_TOKEN\n  ) {\n    return true\n  }\n  if (\n    type === TokenType.LEFT_SQUARE_BRACKET_TOKEN &&\n    token.type === TokenType.RIGHT_SQUARE_BRACKET_TOKEN\n  ) {\n    return true\n  }\n\n  return (\n    type === TokenType.LEFT_PARENTHESIS_TOKEN &&\n    token.type === TokenType.RIGHT_PARENTHESIS_TOKEN\n  )\n}\n","import {\n  IPropertyValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue, isDimensionToken } from '../syntax/parser'\nconst borderWidthForSide = (\n  side: string\n): IPropertyValueDescriptor<number> => ({\n  name: `border-${side}-width`,\n  initialValue: '0',\n  type: PropertyDescriptorParsingType.VALUE,\n  prefix: false,\n  parse: (token: CSSValue): number => {\n    if (isDimensionToken(token)) {\n      return token.number\n    }\n    return 0\n  }\n})\n\nexport const borderTopWidth: IPropertyValueDescriptor<number> =\n  borderWidthForSide('top')\nexport const borderRightWidth: IPropertyValueDescriptor<number> =\n  borderWidthForSide('right')\nexport const borderBottomWidth: IPropertyValueDescriptor<number> =\n  borderWidthForSide('bottom')\nexport const borderLeftWidth: IPropertyValueDescriptor<number> =\n  borderWidthForSide('left')\n","import {\n  IPropertyTypeValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nexport const color: IPropertyTypeValueDescriptor = {\n  name: `color`,\n  initialValue: 'transparent',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TYPE_VALUE,\n  format: 'color'\n}\n","import {\n  IPropertyListDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue, isIdentToken } from '../syntax/parser'\nexport const enum DISPLAY {\n  NONE = 0,\n  BLOCK = 1 << 1,\n  INLINE = 1 << 2,\n  RUN_IN = 1 << 3,\n  FLOW = 1 << 4,\n  FLOW_ROOT = 1 << 5,\n  TABLE = 1 << 6,\n  FLEX = 1 << 7,\n  GRID = 1 << 8,\n  RUBY = 1 << 9,\n  SUBGRID = 1 << 10,\n  LIST_ITEM = 1 << 11,\n  TABLE_ROW_GROUP = 1 << 12,\n  TABLE_HEADER_GROUP = 1 << 13,\n  TABLE_FOOTER_GROUP = 1 << 14,\n  TABLE_ROW = 1 << 15,\n  TABLE_CELL = 1 << 16,\n  TABLE_COLUMN_GROUP = 1 << 17,\n  TABLE_COLUMN = 1 << 18,\n  TABLE_CAPTION = 1 << 19,\n  RUBY_BASE = 1 << 20,\n  RUBY_TEXT = 1 << 21,\n  RUBY_BASE_CONTAINER = 1 << 22,\n  RUBY_TEXT_CONTAINER = 1 << 23,\n  CONTENTS = 1 << 24,\n  INLINE_BLOCK = 1 << 25,\n  INLINE_LIST_ITEM = 1 << 26,\n  INLINE_TABLE = 1 << 27,\n  INLINE_FLEX = 1 << 28,\n  INLINE_GRID = 1 << 29\n}\n\nexport type Display = number\n\nexport const display: IPropertyListDescriptor<Display> = {\n  name: 'display',\n  initialValue: 'inline-block',\n  prefix: false,\n  type: PropertyDescriptorParsingType.LIST,\n  parse: (tokens: CSSValue[]): Display => {\n    return tokens.filter(isIdentToken).reduce((bit, token) => {\n      return bit | parseDisplayValue(token.value)\n    }, DISPLAY.NONE)\n  }\n}\n\nconst parseDisplayValue = (display: string): Display => {\n  switch (display) {\n    case 'block':\n    case '-webkit-box':\n      return DISPLAY.BLOCK\n    case 'inline':\n      return DISPLAY.INLINE\n    case 'run-in':\n      return DISPLAY.RUN_IN\n    case 'flow':\n      return DISPLAY.FLOW\n    case 'flow-root':\n      return DISPLAY.FLOW_ROOT\n    case 'table':\n      return DISPLAY.TABLE\n    case 'flex':\n    case '-webkit-flex':\n      return DISPLAY.FLEX\n    case 'grid':\n    case '-ms-grid':\n      return DISPLAY.GRID\n    case 'ruby':\n      return DISPLAY.RUBY\n    case 'subgrid':\n      return DISPLAY.SUBGRID\n    case 'list-item':\n      return DISPLAY.LIST_ITEM\n    case 'table-row-group':\n      return DISPLAY.TABLE_ROW_GROUP\n    case 'table-header-group':\n      return DISPLAY.TABLE_HEADER_GROUP\n    case 'table-footer-group':\n      return DISPLAY.TABLE_FOOTER_GROUP\n    case 'table-row':\n      return DISPLAY.TABLE_ROW\n    case 'table-cell':\n      return DISPLAY.TABLE_CELL\n    case 'table-column-group':\n      return DISPLAY.TABLE_COLUMN_GROUP\n    case 'table-column':\n      return DISPLAY.TABLE_COLUMN\n    case 'table-caption':\n      return DISPLAY.TABLE_CAPTION\n    case 'ruby-base':\n      return DISPLAY.RUBY_BASE\n    case 'ruby-text':\n      return DISPLAY.RUBY_TEXT\n    case 'ruby-base-container':\n      return DISPLAY.RUBY_BASE_CONTAINER\n    case 'ruby-text-container':\n      return DISPLAY.RUBY_TEXT_CONTAINER\n    case 'contents':\n      return DISPLAY.CONTENTS\n    case 'inline-block':\n      return DISPLAY.INLINE_BLOCK\n    case 'inline-list-item':\n      return DISPLAY.INLINE_LIST_ITEM\n    case 'inline-table':\n      return DISPLAY.INLINE_TABLE\n    case 'inline-flex':\n      return DISPLAY.INLINE_FLEX\n    case 'inline-grid':\n      return DISPLAY.INLINE_GRID\n  }\n\n  return DISPLAY.NONE\n}\n","import {\n  IPropertyTypeValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nexport const fontSize: IPropertyTypeValueDescriptor = {\n  name: `font-size`,\n  initialValue: '0',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TYPE_VALUE,\n  format: 'length'\n}\n","import {\n  IPropertyValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue, isIdentToken, isNumberToken } from '../syntax/parser'\nexport const fontWeight: IPropertyValueDescriptor<number> = {\n  name: 'font-weight',\n  initialValue: 'normal',\n  type: PropertyDescriptorParsingType.VALUE,\n  prefix: false,\n  parse: (token: CSSValue): number => {\n    if (isNumberToken(token)) {\n      return token.number\n    }\n\n    if (isIdentToken(token)) {\n      switch (token.value) {\n        case 'bold':\n          return 700\n        case 'normal':\n        default:\n          return 400\n      }\n    }\n\n    return 400\n  }\n}\n","import {\n  IPropertyTokenValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue, isIdentToken } from '../syntax/parser'\nimport { TokenType } from '../syntax/tokenizer'\nimport {\n  getAbsoluteValue,\n  isLengthPercentage\n} from '../types/length-percentage'\nexport const lineHeight: IPropertyTokenValueDescriptor = {\n  name: 'line-height',\n  initialValue: 'normal',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TOKEN_VALUE\n}\n\nexport const computeLineHeight = (\n  token: CSSValue,\n  fontSize: number\n): number => {\n  if (isIdentToken(token) && token.value === 'normal') {\n    return 1.2 * fontSize\n  } else if (token.type === TokenType.NUMBER_TOKEN) {\n    return fontSize * token.number\n  } else if (isLengthPercentage(token)) {\n    return getAbsoluteValue(token, fontSize)\n  }\n\n  return fontSize\n}\n","import {\n  IPropertyTokenValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nconst marginForSide = (side: string): IPropertyTokenValueDescriptor => ({\n  name: `margin-${side}`,\n  initialValue: '0',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TOKEN_VALUE\n})\n\nexport const marginTop: IPropertyTokenValueDescriptor = marginForSide('top')\nexport const marginRight: IPropertyTokenValueDescriptor = marginForSide('right')\nexport const marginBottom: IPropertyTokenValueDescriptor =\n  marginForSide('bottom')\nexport const marginLeft: IPropertyTokenValueDescriptor = marginForSide('left')\n","import {\n  IPropertyValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue, isNumberToken } from '../syntax/parser'\nexport const opacity: IPropertyValueDescriptor<number> = {\n  name: 'opacity',\n  initialValue: '1',\n  type: PropertyDescriptorParsingType.VALUE,\n  prefix: false,\n  parse: (token: CSSValue): number => {\n    if (isNumberToken(token)) {\n      return token.number\n    }\n    return 1\n  }\n}\n","import {\n  IPropertyTypeValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nconst paddingForSide = (side: string): IPropertyTypeValueDescriptor => ({\n  name: `padding-${side}`,\n  initialValue: '0',\n  prefix: false,\n  type: PropertyDescriptorParsingType.TYPE_VALUE,\n  format: 'length-percentage'\n})\n\nexport const paddingTop: IPropertyTypeValueDescriptor = paddingForSide('top')\nexport const paddingRight: IPropertyTypeValueDescriptor =\n  paddingForSide('right')\nexport const paddingBottom: IPropertyTypeValueDescriptor =\n  paddingForSide('bottom')\nexport const paddingLeft: IPropertyTypeValueDescriptor = paddingForSide('left')\n","import {\n  IPropertyIdentValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nexport const enum TEXT_ALIGN {\n  LEFT = 0,\n  CENTER = 1,\n  RIGHT = 2\n}\n\nexport const textAlign: IPropertyIdentValueDescriptor<TEXT_ALIGN> = {\n  name: 'text-align',\n  initialValue: 'left',\n  prefix: false,\n  type: PropertyDescriptorParsingType.IDENT_VALUE,\n  parse: (textAlign: string) => {\n    switch (textAlign) {\n      case 'right':\n        return TEXT_ALIGN.RIGHT\n      case 'center':\n      case 'justify':\n        return TEXT_ALIGN.CENTER\n      case 'left':\n      default:\n        return TEXT_ALIGN.LEFT\n    }\n  }\n}\n","import {\n  IPropertyValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue } from '../syntax/parser'\nimport { NumberValueToken, TokenType } from '../syntax/tokenizer'\nexport type Matrix = [number, number, number, number, number, number]\nexport type Transform = Matrix | null\n\nexport const transform: IPropertyValueDescriptor<Transform> = {\n  name: 'transform',\n  initialValue: 'none',\n  prefix: true,\n  type: PropertyDescriptorParsingType.VALUE,\n  parse: (token: CSSValue) => {\n    if (token.type === TokenType.IDENT_TOKEN && token.value === 'none') {\n      return null\n    }\n\n    if (token.type === TokenType.FUNCTION) {\n      const transformFunction = SUPPORTED_TRANSFORM_FUNCTIONS[token.name]\n      if (typeof transformFunction === 'undefined') {\n        throw new Error(\n          `Attempting to parse an unsupported transform function \"${token.name}\"`\n        )\n      }\n      return transformFunction(token.values)\n    }\n\n    return null\n  }\n}\n\nconst matrix = (args: CSSValue[]): Transform => {\n  const values = args\n    .filter((arg) => arg.type === TokenType.NUMBER_TOKEN)\n    .map((arg: NumberValueToken) => arg.number)\n\n  return values.length === 6 ? (values as Matrix) : null\n}\n\n// doesn't support 3D transforms at the moment\nconst matrix3d = (args: CSSValue[]): Transform => {\n  const values = args\n    .filter((arg) => arg.type === TokenType.NUMBER_TOKEN)\n    .map((arg: NumberValueToken) => arg.number)\n\n  const [a1, b1, {}, {}, a2, b2, {}, {}, {}, {}, {}, {}, a4, b4, {}, {}] =\n    values\n\n  return values.length === 16 ? [a1, b1, a2, b2, a4, b4] : null\n}\n\nconst SUPPORTED_TRANSFORM_FUNCTIONS: {\n  [key: string]: (args: CSSValue[]) => Transform\n} = {\n  matrix: matrix,\n  matrix3d: matrix3d\n}\n","import {\n  IPropertyIdentValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\n\nexport const enum VISIBILITY {\n  VISIBLE = 0,\n  HIDDEN = 1,\n  COLLAPSE = 2\n}\n\nexport const visibility: IPropertyIdentValueDescriptor<VISIBILITY> = {\n  name: 'visible',\n  initialValue: 'none',\n  prefix: false,\n  type: PropertyDescriptorParsingType.IDENT_VALUE,\n  parse: (visibility: string) => {\n    switch (visibility) {\n      case 'hidden':\n        return VISIBILITY.HIDDEN\n      case 'collapse':\n        return VISIBILITY.COLLAPSE\n      case 'visible':\n      default:\n        return VISIBILITY.VISIBLE\n    }\n  }\n}\n","import {\n  IPropertyValueDescriptor,\n  PropertyDescriptorParsingType\n} from '../IPropertyDescriptor'\nimport { CSSValue, isNumberToken } from '../syntax/parser'\nimport { TokenType } from '../syntax/tokenizer'\n\ninterface zIndex {\n  order: number\n  auto: boolean\n}\n\nexport const zIndex: IPropertyValueDescriptor<zIndex> = {\n  name: 'z-index',\n  initialValue: 'auto',\n  prefix: false,\n  type: PropertyDescriptorParsingType.VALUE,\n  parse: (token: CSSValue): zIndex => {\n    if (token.type === TokenType.IDENT_TOKEN) {\n      return { auto: true, order: 0 }\n    }\n\n    if (isNumberToken(token)) {\n      return { auto: false, order: token.number }\n    }\n\n    throw new Error(`Invalid z-index number parsed`)\n  }\n}\n","import { CSSPropertyDescriptor } from './IPropertyDescriptor'\nimport { backgroundColor } from './property-descriptors/background-color'\nimport {\n  borderBottomColor,\n  borderLeftColor,\n  borderRightColor,\n  borderTopColor\n} from './property-descriptors/border-color'\nimport {\n  borderBottomWidth,\n  borderLeftWidth,\n  borderRightWidth,\n  borderTopWidth\n} from './property-descriptors/border-width'\nimport { color } from './property-descriptors/color'\nimport { display } from './property-descriptors/display'\nimport { fontSize } from './property-descriptors/font-size'\nimport { fontWeight } from './property-descriptors/font-weight'\nimport { lineHeight } from './property-descriptors/line-height'\nimport {\n  marginBottom,\n  marginLeft,\n  marginRight,\n  marginTop\n} from './property-descriptors/margin'\nimport { opacity } from './property-descriptors/opacity'\nimport {\n  paddingBottom,\n  paddingLeft,\n  paddingRight,\n  paddingTop\n} from './property-descriptors/padding'\nimport { textAlign } from './property-descriptors/text-align'\nimport { transform } from './property-descriptors/transform'\nimport { visibility } from './property-descriptors/visibility'\nimport { zIndex } from './property-descriptors/z-index'\n\nexport function createCSSDeclaration(styles) {\n  console.log('CSSSSSSSS', styles)\n  return {\n    backgroundColor: parse(backgroundColor, styles.backgroundColor),\n    borderTopColor: parse(borderTopColor, styles.borderTopColor),\n    borderRightColor: parse(borderRightColor, styles.borderRightColor),\n    borderBottomColor: parse(borderBottomColor, styles.borderBottomColor),\n    borderLeftColor: parse(borderLeftColor, styles.borderLeftColor),\n    // borderTopLeftRadius: parse(borderTopLeftRadius, styles.borderTopLeftRadius),\n    // borderTopRightRadius: parse(borderTopRightRadius, styles.borderTopRightRadius),\n    // borderBottomRightRadius: parse(borderBottomRightRadius, styles.borderBottomRightRadius),\n    // borderBottomLeftRadius: parse(borderBottomLeftRadius, styles.borderBottomLeftRadius),\n    // borderTopStyle: parse(borderTopStyle, styles.borderTopStyle),\n    // borderRightStyle: parse(borderRightStyle, styles.borderRightStyle),\n    // borderBottomStyle: parse(borderBottomStyle, styles.borderBottomStyle),\n    // borderLeftStyle: parse(borderLeftStyle, styles.borderLeftStyle),\n    borderTopWidth: parse(borderTopWidth, styles.borderTopWidth),\n    borderRightWidth: parse(borderRightWidth, styles.borderRightWidth),\n    borderBottomWidth: parse(borderBottomWidth, styles.borderBottomWidth),\n    borderLeftWidth: parse(borderLeftWidth, styles.borderLeftWidth),\n    // boxShadow: parse(boxShadow, styles.boxShadow),\n    color: parse(color, styles.color),\n    // direction: parse(direction, styles.direction),\n    display: parse(display, styles.display),\n    // float: parse(float, styles.cssFloat),\n    // fontFamily: parse(fontFamily, styles.fontFamily),\n    fontSize: parse(fontSize, styles.fontSize),\n    // fontStyle: parse(fontStyle, styles.fontStyle),\n    // fontVariant: parse(fontVariant, styles.fontVariant),\n    fontWeight: parse(fontWeight, styles.fontWeight),\n    // letterSpacing: parse(letterSpacing, styles.letterSpacing),\n    // lineBreak: parse(lineBreak, styles.lineBreak),\n    lineHeight: parse(lineHeight, styles.lineHeight),\n    // listStyleImage: parse(listStyleImage, styles.listStyleImage),\n    // listStylePosition: parse(listStylePosition, styles.listStylePosition),\n    // listStyleType: parse(listStyleType, styles.listStyleType),\n    marginTop: parse(marginTop, styles.marginTop),\n    marginRight: parse(marginRight, styles.marginRight),\n    marginBottom: parse(marginBottom, styles.marginBottom),\n    marginLeft: parse(marginLeft, styles.marginLeft),\n    opacity: parse(opacity, styles.opacity),\n    // const overflowTuple: parse(overflow, styles.overflow),\n    // overflowX: overflowTuple[0],\n    // overflowY: overflowTuple[overflowTuple.length > 1 ? 1 : 0],\n    // overflowWrap: parse(overflowWrap, styles.overflowWrap),\n    paddingTop: parse(paddingTop, styles.paddingTop),\n    paddingRight: parse(paddingRight, styles.paddingRight),\n    paddingBottom: parse(paddingBottom, styles.paddingBottom),\n    paddingLeft: parse(paddingLeft, styles.paddingLeft),\n    // paintOrder: parse(paintOrder, styles.paintOrder),\n    // position: parse(position, styles.position),\n    textAlign: parse(textAlign, styles.textAlign),\n    // textDecorationColor: parse(\n    //     context,\n    //     textDecorationColor,\n    //     styles.textDecorationColor ?? styles.color\n    // ),\n    // textDecorationLine: parse(\n    //     context,\n    //     textDecorationLine,\n    //     styles.textDecorationLine ?? styles.textDecoration\n    // ),\n    // textShadow: parse(textShadow, styles.textShadow),\n    // textTransform: parse(textTransform, styles.textTransform),\n    transform: parse(transform, styles.transform),\n    // transformOrigin: parse(transformOrigin, styles.transformOrigin),\n    visibility: parse(visibility, styles.visibility),\n    // webkitTextStrokeColor: parse(webkitTextStrokeColor, styles.webkitTextStrokeColor),\n    // webkitTextStrokeWidth: parse(webkitTextStrokeWidth, styles.webkitTextStrokeWidth),\n    // wordBreak: parse(wordBreak, styles.wordBreak),\n    zIndex: parse(zIndex, styles.zIndex)\n  }\n}\n\nconst parse = (\n  descriptor: CSSPropertyDescriptor<any>,\n  style?: string | null\n) => {\n  const value =\n    style !== null && typeof style !== 'undefined'\n      ? style.toString()\n      : descriptor.initialValue\n\n  // TODO: finish tokenizer\n  return value\n}\n","export type TreeNodeChildren = Array<TreeNode>\n\nexport interface TreeNode {\n  __v_isTreeNode: boolean\n  _children: TreeNodeChildren\n  children: TreeNodeChildren\n  parent: TreeNode | null\n  root: TreeNode | null\n  prev: TreeNode | null\n  next: TreeNode | null\n  instance: any\n  hasChildren(): boolean\n  appendChild(child: TreeNode): void\n  prependChild(child: TreeNode): void\n  removeChild(child: TreeNode): void\n  append(): void\n  prepend(): void\n  remove(): void\n}\n\nexport function isTreeNode(value: any): value is TreeNode {\n  return value ? value.__v_isTreeNode === true : false\n}\n\nexport function isEndNode(node) {\n  return node.parent && !node.next && !node.hasChildren()\n}\n\nexport function createTreeNode(options?) {\n  const treeNode: TreeNode = {\n    __v_isTreeNode: true,\n    _children: options.children || [],\n    parent: null,\n    prev: null,\n    next: null,\n    instance: options.instance || null,\n    set children(value) {\n      treeNode._children = value\n    },\n    get children() {\n      return treeNode._children || []\n    },\n    get root() {\n      return getRoot(this)\n    },\n    hasChildren,\n    appendChild,\n    prependChild,\n    removeChild,\n    append,\n    prepend,\n    remove\n  }\n\n  function getRoot(node) {\n    if (node.parent) {\n      return getRoot(node.parent)\n    } else {\n      return node\n    }\n  }\n\n  function hasChildren() {\n    return Array.isArray(treeNode._children) && treeNode._children.length\n      ? true\n      : false\n  }\n\n  function appendChild(child) {\n    if (!isTreeNode(child)) throw Error('Unknown treeNode type')\n\n    const prev = treeNode._children[treeNode._children.length - 1] || null\n    if (prev && isTreeNode(prev)) {\n      _setSibling(prev, prev.prev, child)\n    }\n\n    Array.isArray(treeNode._children) && treeNode._children.push(child)\n\n    _setParent(child, treeNode)\n    _setSibling(child, prev, null)\n  }\n\n  function prependChild(child) {\n    if (!isTreeNode(child)) throw Error('Unknown treeNode type')\n  }\n\n  function removeChild(child) {\n    if (!isTreeNode(child)) throw Error('Unknown treeNode type')\n  }\n\n  function append() {}\n\n  function prepend() {}\n\n  function remove() {}\n\n  return treeNode\n}\n\nfunction _setParent(child: TreeNode, parent): void {\n  child.parent = parent\n}\n\nfunction _setSibling(\n  node: TreeNode,\n  prev: TreeNode | null,\n  next: TreeNode | null\n): void {\n  node.prev = prev\n  node.next = next\n}\n\nexport function connectChildren(node) {\n  console.log('connectChildren', node)\n  if (node.hasChildren()) {\n    node._children.map((child, index) => {\n      _setParent(child, node)\n      _setSibling(child, node._children[index - 1], node._children[index + 1])\n      connectChildren(child)\n    })\n  }\n}\n","import { createCSSDeclaration } from '../css'\nimport { CanvasElement } from '../element'\nimport { TreeNode, createTreeNode } from '../tree-node'\n\nexport type RenderStyle = {\n  backgroundColor: string\n  color: string\n  // width: number\n  // height: number\n  // paddingWidth: number\n  // paddingHeight: number\n  // paddingTop: number\n  // paddingBottom: number\n  // paddingLeft: number\n  // paddingRight: number\n  // marginLeft: number\n  // marginRight: number\n  // marginTop: number\n  // marginBottom: number\n  // contentWidth: number\n  // contentHeight: number\n  // fullBoxWidth: number\n  // fullBoxHeight: number\n  // lineCap: string // butt round square\n  // visible: boolean\n}\n\nexport interface RenderObject {\n  root: RenderObject | null\n  container: RenderObject | null\n  nextSibling: RenderObject | null\n  prevSibling: RenderObject | null\n  children: RenderObject[]\n  element: CanvasElement\n  node: TreeNode\n  renderStyle: RenderStyle\n  createRenderStyle(elm: CanvasElement): void\n  updateRenderStyle(): void\n  layout(): void\n  appendChild(child: RenderObject): void\n}\n\nexport function createRenderObject(element, options = {}): RenderObject {\n  let renderObject = {\n    __v_isRenderObject: true,\n    options,\n    root: null,\n    container: null,\n    nextSibling: null,\n    prevSibling: null,\n    children: [],\n    element,\n    node: null,\n    renderStyle: createRenderStyle(element),\n    createRenderStyle,\n    updateRenderStyle,\n    layout,\n    reflow,\n    appendChild\n  }\n\n  let treeNode = createTreeNode({ instance: renderObject })\n  renderObject.node = treeNode\n\n  Object.defineProperty(renderObject, 'root', {\n    get() {\n      return treeNode.root.instance\n    }\n  })\n\n  Object.defineProperty(renderObject, 'container', {\n    get() {\n      return treeNode.parent ? treeNode.parent.instance : null\n    }\n  })\n\n  Object.defineProperty(renderObject, 'prevSibling', {\n    get() {\n      return treeNode.prev ? treeNode.prev.instance : null\n    }\n  })\n\n  Object.defineProperty(renderObject, 'nextSibling', {\n    get() {\n      return treeNode.next ? treeNode.next.instance : null\n    }\n  })\n\n  Object.defineProperty(renderObject, 'children', {\n    get() {\n      return treeNode.children.map((item) => item.instance)\n    }\n  })\n\n  function createRenderStyle(elm) {\n    let renderStyle = createCSSDeclaration(elm.styles)\n    console.log('renderStyle', elm, elm.styles, renderStyle)\n    return renderStyle\n  }\n\n  function updateRenderStyle() {}\n\n  function layout() {}\n\n  function reflow() {}\n\n  function appendChild(child) {\n    treeNode.appendChild(child.node)\n  }\n\n  return renderObject\n}\n","import { Color } from '../css/types/color'\nimport { CanvasElement } from '../element'\n\nexport type RenderConfigurations = RenderOptions & {\n  backgroundColor: Color | null\n}\n\nexport interface RenderOptions {\n  canvas?: HTMLCanvasElement\n  ctx: CanvasRenderingContext2D\n  dpr?: number\n  width: number\n  height: number\n}\n\nexport interface CanvasRenderer {\n  canvas: HTMLCanvasElement\n  ctx: CanvasRenderingContext2D\n  dpr?: number\n  render(): void\n}\n\nexport function createRenderer(options: RenderConfigurations): CanvasRenderer {\n  let renderer: CanvasRenderer = {\n    canvas: options.canvas,\n    ctx: options.ctx,\n    dpr: options.dpr || 1,\n    render() {}\n  }\n\n  return renderer\n}\n","export const EMPTY_OBJ = Object.freeze({})\nexport const EMPTY_ARR = Object.freeze([])\n\nexport const NOOP = () => {}\n\n/**\n * Always return false.\n */\nexport const NO = () => false\n\nconst onRE = /^on[^a-z]/\nexport const isOn = (key: string) => onRE.test(key)\n\nexport const isModelListener = (key: string) => key.startsWith('onUpdate:')\n\nexport const extend = Object.assign\n\nexport const remove = <T>(arr: T[], el: T) => {\n  const i = arr.indexOf(el)\n  if (i > -1) {\n    arr.splice(i, 1)\n  }\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nexport const hasOwn = (\n  val: object,\n  key: string | symbol\n): key is keyof typeof val => hasOwnProperty.call(val, key)\n\nexport const isExact = (num: unknown): num is number => {\n  return isNumber.call(null, num)\n}\n\nexport const isAuto = (num: unknown): num is string => {\n  return num === 'auto'\n}\n\nexport const isOuter = (num: unknown): num is string => {\n  if (!isString(num)) return\n  return isArray(num.match('%'))\n}\n\nexport const parseOuter = (num: string): number => {\n  let _n = parseInt(num.replace('%', ''))\n  return isNaN(_n) || _n < 0 ? 0 : _n / 100\n}\n\nexport const isArray = Array.isArray\nexport const isMap = (val: unknown): val is Map<any, any> =>\n  toTypeString(val) === '[object Map]'\nexport const isSet = (val: unknown): val is Set<any> =>\n  toTypeString(val) === '[object Set]'\n\nexport const isDate = (val: unknown): val is Date =>\n  toTypeString(val) === '[object Date]'\nexport const isRegExp = (val: unknown): val is RegExp =>\n  toTypeString(val) === '[object RegExp]'\nexport const isFunction = (val: unknown): val is Function =>\n  typeof val === 'function'\nexport const isString = (val: unknown): val is string => typeof val === 'string'\nexport const isNumber = (val: unknown): val is number => typeof val === 'number'\nexport const isSymbol = (val: unknown): val is symbol => typeof val === 'symbol'\nexport const isObject = (val: unknown): val is Record<any, any> =>\n  val !== null && typeof val === 'object'\n\nexport const isPromise = <T = any>(val: unknown): val is Promise<T> => {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch)\n}\n\nexport const objectToString = Object.prototype.toString\nexport const toTypeString = (value: unknown): string =>\n  objectToString.call(value)\n\nexport const toRawType = (value: unknown): string => {\n  // extract \"RawType\" from strings like \"[object RawType]\"\n  return toTypeString(value).slice(8, -1)\n}\n\nexport const isPlainObject = (val: unknown): val is object =>\n  toTypeString(val) === '[object Object]'\n\nexport const isIntegerKey = (key: unknown) =>\n  isString(key) &&\n  key !== 'NaN' &&\n  key[0] !== '-' &&\n  '' + parseInt(key, 10) === key\n\nexport const mergeDeep = (target: unknown, ...sources) => {\n  if (!sources.length) return target\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} })\n        mergeDeep(target[key], source[key])\n      } else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources)\n}\n","import { isString, compose } from '../utils'\nimport STYLE_CONSTANT, { ElementStyleType } from '../styleConstant'\nimport { TreeNode, createTreeNode } from '../tree-node'\nimport { Context } from '../context'\nimport { RenderObject, createRenderObject } from '../render/renderObject'\n\nexport const DEFAULT_CONTAINER = {\n  styles: {},\n  renderStyles: {\n    width: 0,\n    height: 0,\n    paddingWidth: 0,\n    paddingHeight: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n    paddingLeft: 0,\n    paddingRight: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    marginTop: 0,\n    marginBottom: 0,\n    borderTopWidth: 0,\n    borderBottomWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    contentWidth: 0,\n    contentHeight: 0,\n    fullBoxWidth: 0,\n    fullBoxHeight: 0,\n    lineCap: 'butt',\n    visible: true\n  },\n  layout: {\n    x: 0,\n    y: 0,\n    contentX: 0,\n    contentY: 0\n  }\n}\n\n// export enum ElementTypes {\n//   root = 'root',\n//   view = 'view',\n//   text = 'text',\n//   img = 'img'\n// }\n\ntype ExtendStyles = {\n  textAlign?: string\n  lineHeight?: number\n  fontSize?: number\n  color?: string\n  fontFamily?: string\n  alignItems?: string\n  alignSelf?: string\n  visible?: boolean\n}\n\nexport type Layout = {\n  x: number\n  y: number\n  contentX?: number\n  contentY?: number\n}\n\n// type DefaultContainer = {\n//   styles: ElementStyleType\n//   renderStyles: RenderStyle\n//   layout: Layout\n// }\n\n// type CanvasElementContainer = CanvasElement | DefaultContainer\n\nexport type ElementOptions = {\n  style?: ElementStyleType\n  text?: string\n}\n\nexport function isCanvasElement(value: any): value is CanvasElement {\n  return value ? value.__v_isCanvasElement === true : false\n}\n\nexport interface CanvasElement {\n  __v_isCanvasElement: boolean\n  type: string\n  options: ElementOptions\n  styles: ElementStyleType\n  debugColor: string | null\n  context: Context\n  root: CanvasElement | null\n  container: CanvasElement | null\n  nextSibling: CanvasElement | null\n  prevSibling: CanvasElement | null\n  children: CanvasElement[]\n  node: TreeNode\n  renderObject: RenderObject\n  appendChild(child: CanvasElement): void\n  hasChildren(): boolean\n  attach(parent: CanvasElement): void\n  hasRootElement(): boolean\n  getRootElement(): CanvasElement\n  isVisible(): boolean\n}\n\nexport function createBaseElement(\n  context: Context,\n  type: string,\n  options: ElementOptions = {},\n  children?: CanvasElement[] | string\n): CanvasElement {\n  let element: CanvasElement = {\n    __v_isCanvasElement: true,\n    type,\n    options,\n    styles: options.style || {},\n    context,\n    root: null,\n    container: null,\n    nextSibling: null,\n    prevSibling: null,\n    children: [],\n    node: null,\n    renderObject: null,\n    debugColor: null,\n    appendChild,\n    hasChildren,\n    attach,\n    hasRootElement,\n    getRootElement,\n    isVisible\n  }\n\n  let treeNode = createTreeNode({ instance: element })\n  element.node = treeNode\n\n  let renderObject = createRenderObject(element)\n  element.renderObject = renderObject\n\n  Object.defineProperty(element, 'root', {\n    get() {\n      return treeNode.root.instance\n    }\n  })\n\n  Object.defineProperty(element, 'container', {\n    get() {\n      return treeNode.parent ? treeNode.parent.instance : null\n    }\n  })\n\n  Object.defineProperty(element, 'prevSibling', {\n    get() {\n      return treeNode.prev ? treeNode.prev.instance : null\n    }\n  })\n\n  Object.defineProperty(element, 'nextSibling', {\n    get() {\n      return treeNode.next ? treeNode.next.instance : null\n    }\n  })\n\n  Object.defineProperty(element, 'children', {\n    get() {\n      if (isString(children)) return children\n      return treeNode.children.map((item) => item.instance)\n    }\n  })\n\n  function appendChild(child) {\n    treeNode.appendChild(child.node)\n\n    // attach to renderTree\n    if (element.hasRootElement()) {\n      child.attach(element)\n    }\n  }\n\n  function attach(parent) {\n    parent.renderObject.appendChild(element.renderObject)\n    if (element.hasChildren()) {\n      element.children.forEach((child) => {\n        child.attach(element)\n      })\n    }\n  }\n\n  function hasChildren() {\n    return element.node.hasChildren()\n  }\n\n  function hasRootElement() {\n    return (\n      treeNode.root &&\n      treeNode.root.instance &&\n      treeNode.root.instance.type === 'body'\n    )\n  }\n\n  function getRootElement() {\n    if (element.hasRootElement()) {\n      return treeNode.root.instance\n    }\n\n    return null\n  }\n\n  function isVisible(): boolean {\n    return true\n    // return (\n    //   this.styles.display > 0 &&\n    //   this.styles.opacity > 0 &&\n    //   this.style.visibility === VISIBILITY.VISIBLE\n    // )\n  }\n\n  if (element.type === 'body') {\n    element.styles = {\n      width: '100%',\n      height: '100%'\n    } as ElementStyleType\n  }\n\n  return element\n}\n\nexport function createElementAPI(context): Function {\n  return function createElement(\n    type: string,\n    options: ElementOptions = {},\n    children?: CanvasElement[] | string\n  ): CanvasElement {\n    return createBaseElement(context, type, options, children)\n    // switch (type) {\n    //   case 'text':\n    //     return compose([toTextElement, createBaseElement])(\n    //       context,\n    //       type,\n    //       options,\n    //       children\n    //     )\n    //   default:\n    //     return compose([toViewElement, createBaseElement])(\n    //       context,\n    //       type,\n    //       options,\n    //       children\n    //     )\n    // }\n  }\n}\n\n// function _initStyles(elm: CanvasElement): ElementStyleType {\n//   let styles = mergeDeep(\n//     {},\n//     _getDefaultStyles(),\n//     _getExtendStyles(elm),\n//     elm.options.style || {}\n//   )\n\n//   if (elm.type === 'root') {\n//     styles.width = '100%'\n//     styles.height = '100%'\n//   }\n\n//   completeStyles(styles, elm.container.styles, true)\n//   return styles\n// }\n\n// function _getDefaultStyles() {\n//   return STYLE_CONSTANT.DEFAULT_STYLES\n// }\n\n// function _getExtendStyles(elm) {\n//   let extendStyles = {} as ExtendStyles\n//   const extendKeys = [\n//     'textAlign',\n//     'fontFamily',\n//     'fontWeight',\n//     'fontSize',\n//     'lineHeight',\n//     'wordSpacing',\n//     'letterSpacing',\n//     'color',\n//     'alignItems',\n//     'visibility'\n//   ]\n\n//   extendKeys.map((key) => {\n//     const value = elm.container.styles[key]\n//     if (value) extendStyles[key] = value\n//   })\n\n//   return extendStyles\n// }\n\n// function parsePaddingBox(rawBoxValue, parentBoxValue, margin): number {\n//   let result = 0\n\n//   if (isAuto(rawBoxValue)) {\n//   } else if (isOuter(rawBoxValue)) {\n//     result = parseOuter(rawBoxValue) * parentBoxValue - margin\n//   } else {\n//     result = rawBoxValue\n//   }\n\n//   return result\n// }\n\n// function _getRenderStyles(elm: CanvasElement): RenderStyle {\n//   let renderStyles = {} as RenderStyle\n//   extend(renderStyles, elm.styles)\n//   const parentWidth = elm.container.renderStyles.contentWidth\n//   const parentHeight = elm.container.renderStyles.contentHeight\n\n//   renderStyles.paddingWidth = parsePaddingBox(\n//     elm.styles.width,\n//     parentWidth,\n//     renderStyles.marginLeft + renderStyles.marginRight\n//   )\n\n//   renderStyles.paddingHeight = parsePaddingBox(\n//     elm.styles.height,\n//     parentHeight,\n//     renderStyles.marginTop + renderStyles.marginBottom\n//   )\n\n//   // 初始化contentWidth\n//   // https://www.w3schools.com/css/css_boxmodel.asp\n\n//   renderStyles.contentWidth = calcContentBox(renderStyles, [\n//     'paddingWidth',\n//     'paddingLeft',\n//     'paddingRight'\n//   ])\n\n//   renderStyles.contentHeight = calcContentBox(renderStyles, [\n//     'paddingHeight',\n//     'paddingTop',\n//     'paddingBottom'\n//   ])\n\n//   renderStyles.fullBoxWidth = calcFullBox(renderStyles, [\n//     'contentWidth',\n//     'paddingLeft',\n//     'paddingRight',\n//     'borderLeftWidth',\n//     'borderRightWidth',\n//     'marginLeft',\n//     'marginRight'\n//   ])\n\n//   renderStyles.fullBoxHeight = calcFullBox(renderStyles, [\n//     'contentHeight',\n//     'paddingTop',\n//     'paddingBottom',\n//     'borderTopWidth',\n//     'borderBottomWidth',\n//     'marginTop',\n//     'marginBottom'\n//   ])\n\n//   renderStyles.width =\n//     renderStyles.paddingWidth +\n//     renderStyles.marginLeft +\n//     renderStyles.marginRight +\n//     getTotalBorderWidth(renderStyles)\n//   renderStyles.height =\n//     renderStyles.paddingHeight +\n//     renderStyles.marginTop +\n//     renderStyles.marginBottom +\n//     getTotalBorderHeight(renderStyles)\n\n//   console.log('renderStyles', renderStyles)\n\n//   return renderStyles\n// }\n\n// function getContainerLayout(elm: CanvasElement): Layout {\n//   const container = elm.container\n\n//   return {\n//     width: container.renderStyles.width,\n//     height: container.renderStyles.height,\n//     paddingTop: container.renderStyles.paddingTop,\n//     paddingBottom: container.renderStyles.paddingBottom,\n//     paddingLeft: container.renderStyles.paddingLeft,\n//     paddingRight: container.renderStyles.paddingRight,\n//     marginLeft: container.renderStyles.marginLeft,\n//     marginRight: container.renderStyles.marginRight,\n//     marginTop: container.renderStyles.marginTop,\n//     marginBottom: container.renderStyles.marginBottom,\n//     x: container.layout.x,\n//     y: container.layout.y,\n//     contentX: container.layout.contentX,\n//     contentY: container.layout.contentY,\n//     contentWidth: container.layout.contentWidth,\n//     contentHeight: container.layout.contentHeight\n//   }\n// }\n\n// function getTotalBorderWidth(renderStyles) {\n//   return renderStyles.borderLeftWidth + renderStyles.borderRightWidth\n// }\n\n// function getTotalBorderHeight(renderStyles) {\n//   return renderStyles.borderTopWidth + renderStyles.borderBottomWidth\n// }\n\n// const mapValues = (target, props) => {\n//   let arr = []\n//   props.map((prop) => arr.push(target[prop]))\n//   return arr\n// }\n\n// const calcContentBox = (\n//   renderStyles: RenderStyle,\n//   props: [string, string, string]\n// ) => curry((a, b, c) => a - b - c)(...mapValues(renderStyles, props))\n\n// const calcFullBox = (\n//   renderStyles: RenderStyle,\n//   props: [string, string, string, string, string, string, string]\n// ) =>\n//   curry((a, b, c, d, e, f, g) => a + b + c + d + e + f + g)(\n//     ...mapValues(renderStyles, props)\n//   )\n","/**\n * Patch flags are optimization hints generated by the compiler.\n * when a block with dynamicChildren is encountered during diff, the algorithm\n * enters \"optimized mode\". In this mode, we know that the vdom is produced by\n * a render function generated by the compiler, so the algorithm only needs to\n * handle updates explicitly marked by these patch flags.\n *\n * Patch flags can be combined using the | bitwise operator and can be checked\n * using the & operator, e.g.\n *\n * ```js\n * const flag = TEXT | CLASS\n * if (flag & TEXT) { ... }\n * ```\n *\n * Check the `patchElement` function in '../../runtime-core/src/renderer.ts' to see how the\n * flags are handled during diff.\n */\nexport const enum PatchFlags {\n  /**\n   * Indicates an element with dynamic textContent (children fast path)\n   */\n  TEXT = 1,\n\n  /**\n   * Indicates an element with dynamic class binding.\n   */\n  CLASS = 1 << 1,\n\n  /**\n   * Indicates an element with dynamic style\n   * The compiler pre-compiles static string styles into static objects\n   * + detects and hoists inline static objects\n   * e.g. `style=\"color: red\"` and `:style=\"{ color: 'red' }\"` both get hoisted\n   * as:\n   * ```js\n   * const style = { color: 'red' }\n   * render() { return e('div', { style }) }\n   * ```\n   */\n  STYLE = 1 << 2,\n\n  /**\n   * Indicates an element that has non-class/style dynamic props.\n   * Can also be on a component that has any dynamic props (includes\n   * class/style). when this flag is present, the vnode also has a dynamicProps\n   * array that contains the keys of the props that may change so the runtime\n   * can diff them faster (without having to worry about removed props)\n   */\n  PROPS = 1 << 3,\n\n  /**\n   * Indicates an element with props with dynamic keys. When keys change, a full\n   * diff is always needed to remove the old key. This flag is mutually\n   * exclusive with CLASS, STYLE and PROPS.\n   */\n  FULL_PROPS = 1 << 4,\n\n  /**\n   * Indicates an element with event listeners (which need to be attached\n   * during hydration)\n   */\n  HYDRATE_EVENTS = 1 << 5,\n\n  /**\n   * Indicates a fragment whose children order doesn't change.\n   */\n  STABLE_FRAGMENT = 1 << 6,\n\n  /**\n   * Indicates a fragment with keyed or partially keyed children\n   */\n  KEYED_FRAGMENT = 1 << 7,\n\n  /**\n   * Indicates a fragment with unkeyed children.\n   */\n  UNKEYED_FRAGMENT = 1 << 8,\n\n  /**\n   * Indicates an element that only needs non-props patching, e.g. ref or\n   * directives (onVnodeXXX hooks). since every patched vnode checks for refs\n   * and onVnodeXXX hooks, it simply marks the vnode so that a parent block\n   * will track it.\n   */\n  NEED_PATCH = 1 << 9,\n\n  /**\n   * Indicates a component with dynamic slots (e.g. slot that references a v-for\n   * iterated value, or dynamic slot names).\n   * Components with this flag are always force updated.\n   */\n  DYNAMIC_SLOTS = 1 << 10,\n\n  /**\n   * Indicates a fragment that was created only because the user has placed\n   * comments at the root level of a template. This is a dev-only flag since\n   * comments are stripped in production.\n   */\n  DEV_ROOT_FRAGMENT = 1 << 11,\n\n  /**\n   * SPECIAL FLAGS -------------------------------------------------------------\n   * Special flags are negative integers. They are never matched against using\n   * bitwise operators (bitwise matching should only happen in branches where\n   * patchFlag > 0), and are mutually exclusive. When checking for a special\n   * flag, simply check patchFlag === FLAG.\n   */\n\n  /**\n   * Indicates a hoisted static vnode. This is a hint for hydration to skip\n   * the entire sub tree since static content never needs to be updated.\n   */\n  HOISTED = -1,\n  /**\n   * A special flag that indicates that the diffing algorithm should bail out\n   * of optimized mode. For example, on block fragments created by renderSlot()\n   * when encountering non-compiler generated slots (i.e. manually written\n   * render functions, which should always be fully diffed)\n   * OR manually cloneVNodes\n   */\n  BAIL = -2\n}\n\n/**\n * dev only flag -> name mapping\n */\nexport const PatchFlagNames: Record<PatchFlags, string> = {\n  [PatchFlags.TEXT]: `TEXT`,\n  [PatchFlags.CLASS]: `CLASS`,\n  [PatchFlags.STYLE]: `STYLE`,\n  [PatchFlags.PROPS]: `PROPS`,\n  [PatchFlags.FULL_PROPS]: `FULL_PROPS`,\n  [PatchFlags.HYDRATE_EVENTS]: `HYDRATE_EVENTS`,\n  [PatchFlags.STABLE_FRAGMENT]: `STABLE_FRAGMENT`,\n  [PatchFlags.KEYED_FRAGMENT]: `KEYED_FRAGMENT`,\n  [PatchFlags.UNKEYED_FRAGMENT]: `UNKEYED_FRAGMENT`,\n  [PatchFlags.NEED_PATCH]: `NEED_PATCH`,\n  [PatchFlags.DYNAMIC_SLOTS]: `DYNAMIC_SLOTS`,\n  [PatchFlags.DEV_ROOT_FRAGMENT]: `DEV_ROOT_FRAGMENT`,\n  [PatchFlags.HOISTED]: `HOISTED`,\n  [PatchFlags.BAIL]: `BAIL`\n}\n","import { createEngine } from './engine'\nimport { createRenderer } from './render'\nimport { createElementAPI } from './element'\n\nexport function createDoCanvas(options) {\n  const engine = createEngine()\n  const createElement = createElementAPI(engine)\n\n  let doCanvas = {\n    body: null,\n    engine,\n    renderer: createRenderer(options),\n    createElement: createElement\n  }\n\n  doCanvas.body = createElement('body')\n  engine.createRoot(doCanvas.body)\n  doCanvas.renderer.render()\n\n  return doCanvas\n}\n","import { CanvasElement } from './element'\nimport { RenderObject, createRenderObject } from './render/renderObject'\n\ninterface Engine {\n  rootRenderObject: RenderObject\n  createRoot(rootElm: CanvasElement): void\n  createRenderTree(rootElm: CanvasElement): void\n}\n\nexport function createEngine(): Engine {\n  let engine = {\n    rootRenderObject: null,\n    createRoot,\n    createRenderTree\n  }\n\n  function createRoot(rootElm) {\n    engine.createRenderTree(rootElm)\n  }\n\n  function createRenderTree(rootElm) {\n    engine.rootRenderObject = createRenderObject(rootElm)\n  }\n\n  return engine\n}\n"],"names":["backgroundColor","name","initialValue","prefix","type","format","borderColorForSide","side","concat","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","isNumberToken","token","isIdentToken","borderWidthForSide","parse","isDimensionToken","number","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","color","display","tokens","filter","reduce","bit","parseDisplayValue","value","fontSize","fontWeight","lineHeight","marginForSide","marginTop","marginRight","marginBottom","marginLeft","opacity","paddingForSide","paddingTop","paddingRight","paddingBottom","paddingLeft","textAlign","transform","transformFunction","SUPPORTED_TRANSFORM_FUNCTIONS","Error","values","matrix","args","arg","map","length","matrix3d","a1","b1","a2","b2","a4","b4","visibility","zIndex","auto","order","descriptor","style","toString","isTreeNode","__v_isTreeNode","createTreeNode","options","treeNode","_children","children","parent","prev","next","instance","root","getRoot","this","hasChildren","Array","isArray","appendChild","child","_setSibling","push","_setParent","prependChild","removeChild","append","prepend","remove","node","createRenderObject","element","renderObject","__v_isRenderObject","container","nextSibling","prevSibling","renderStyle","createRenderStyle","updateRenderStyle","layout","reflow","elm","styles","console","log","Object","defineProperty","get","item","createRenderer","canvas","ctx","dpr","render","isString","val","createElementAPI","context","__v_isCanvasElement","debugColor","hasRootElement","attach","forEach","getRootElement","isVisible","width","height","createBaseElement","_a","engine","rootRenderObject","createRoot","rootElm","createRenderTree","createEngine","createElement","doCanvas","body","renderer"],"mappings":"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"}